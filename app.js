
// https://support.google.com/docs/table/25273

var comp = [
  { "name": "ARRAY_CONSTRAIN", displayText: "ARRAY_CONSTRAIN(input_range, num_rows, num_cols)", description: "Constrains an array result to a specified size", category: "Array" },
  { "name": "FREQUENCY", displayText: "FREQUENCY(data, classes)", description: "Calculates the frequency distribution of a one-column array into specified classes", category: "Array" },
  { "name": "GROWTH", displayText: "GROWTH(known_data_y, [known_data_x], [new_data_x], [b])", description: "Given partial data about an exponential growth trend, fits an ideal exponential growth trend and/or predicts further values", category: "Array" },
  { "name": "LINEST", displayText: "LINEST(known_data_y, [known_data_x], [calculate_b], [verbose])", description: "Given partial data about a linear trend, calculates various parameters about the ideal linear trend using the least-squares method", category: "Array" },
  { "name": "LOGEST", displayText: "LOGEST(known_data_y, [known_data_x], [b], [verbose])", description: "Given partial data about an exponential growth curve, calculates various parameters about the best fit ideal exponential growth curve", category: "Array" },
  { "name": "MDETERM", displayText: "MDETERM(square_matrix)", description: "Returns the matrix determinant of a square matrix specified as an array or range", category: "Array" },
  { "name": "MINVERSE", displayText: "MINVERSE(square_matrix)", description: "Returns the multiplicative inverse of a square matrix specified as an array or range", category: "Array" },
  { "name": "MMULT", displayText: "MMULT(matrix1, matrix2)", description: "Calculates the matrix product of two matrices specified as arrays or ranges", category: "Array" },
  { "name": "SUMPRODUCT", displayText: "SUMPRODUCT(array1, [array2, ...])", description: "Calculates the sum of the products of corresponding entries in two equal-sized arrays or ranges", category: "Array" },
  { "name": "SUMX2MY2", displayText: "SUMX2MY2(array_x, array_y)", description: "Calculates the sum of the differences of the squares of values in two arrays", category: "Array" },
  { "name": "SUMX2PY2", displayText: "SUMX2PY2(array_x, array_y)", description: "Calculates the sum of the sums of the squares of values in two arrays", category: "Array" },
  { "name": "SUMXMY2", displayText: "SUMXMY2(array_x, array_y)", description: "Calculates the sum of the squares of differences of values in two arrays", category: "Array" },
  { "name": "TRANSPOSE", displayText: "TRANSPOSE(array_or_range)", description: "Transposes the rows and columns of an array or range of cells", category: "Array" },
  { "name": "TREND", displayText: "TREND(known_data_y, [known_data_x], [new_data_x], [b])", description: "Given partial data about a linear trend, fits an ideal linear trend using the least squares method and/or predicts further values", category: "Array" },
  { "name": "DAVERAGE", displayText: "DAVERAGE(database, field, criteria)", description: "Returns the average of a set of values selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DCOUNT", displayText: "DCOUNT(database, field, criteria)", description: "Counts numeric values selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DCOUNTA", displayText: "DCOUNTA(database, field, criteria)", description: "Counts values, including text, selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DGET", displayText: "DGET(database, field, criteria)", description: "Returns a single value from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DMAX", displayText: "DMAX(database, field, criteria)", description: "Returns the maximum value selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DMIN", displayText: "DMIN(database, field, criteria)", description: "Returns the minimum value selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DPRODUCT", displayText: "DPRODUCT(database, field, criteria)", description: "Returns the product of values selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DSTDEV", displayText: "DSTDEV(database, field, criteria)", description: "Returns the standard deviation of a population sample selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DSTDEVP", displayText: "DSTDEVP(database, field, criteria)", description: "Returns the standard deviation of an entire population selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DSUM", displayText: "DSUM(database, field, criteria)", description: "Returns the sum of values selected from a database table-like array or range using a SQL-like query. Learn more", category: "Database" },
  { "name": "DVAR", displayText: "DVAR(database, field, criteria)", description: "Returns the variance of a population sample selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DVARP", displayText: "DVARP(database, field, criteria)", description: "Returns the variance of an entire population selected from a database table-like array or range using a SQL-like query", category: "Database" },
  { "name": "DATE", displayText: "DATE(year, month, day)", description: "Converts a provided year, month, and day into a date", category: "Date" },
  { "name": "DATEDIF", displayText: "DATEDIF(start_date, end_date, unit)", description: "Calculates the number of days, months, or years between two dates", category: "Date" },
  { "name": "DATEVALUE", displayText: "DATEVALUE(date_string)", description: "Converts a provided date string in a known format to a date value", category: "Date" },
  { "name": "DAY", displayText: "DAY(date)", description: "Returns the day of the month that a specific date falls on, in numeric format", category: "Date" },
  { "name": "DAYS", displayText: "DAYS(end_date, start_date)", description: "Returns the number of days between two dates.", category: "Date" },
  { "name": "DAYS360", displayText: "DAYS360(start_date, end_date, [method])", description: "Returns the difference between two days based on the 360 day year used in some financial interest calculations", category: "Date" },
  { "name": "EDATE", displayText: "EDATE(start_date, months)", description: "Returns a date a specified number of months before or after another date", category: "Date" },
  { "name": "EOMONTH", displayText: "EOMONTH(start_date, months)", description: "Returns a date representing the last day of a month which falls a specified number of months before or after another date", category: "Date" },
  { "name": "HOUR", displayText: "HOUR(time)", description: "Returns the hour component of a specific time, in numeric format", category: "Date" },
  { "name": "ISOWEEKNUM", displayText: "ISOWEEKNUM(date)", description: "Returns the number of the ISO week of the year where the provided date falls", category: "Date" },
  { "name": "MINUTE", displayText: "MINUTE(time)", description: "Returns the minute component of a specific time, in numeric format", category: "Date" },
  { "name": "MONTH", displayText: "MONTH(date)", description: "Returns the month of the year a specific date falls in, in numeric format", category: "Date" },
  { "name": "NETWORKDAYS", displayText: "NETWORKDAYS(start_date, end_date, [holidays])", description: "Returns the number of net working days between two provided days", category: "Date" },
  { "name": "NETWORKDAYS.INTL", displayText: "NETWORKDAYS.INTL(start_date, end_date, [weekend], [holidays])", description: "Returns the number of net working days between two provided days excluding specified weekend days and holidays", category: "Date" },
  { "name": "NOW", displayText: "NOW()", description: "Returns the current date and time as a date value", category: "Date" },
  { "name": "SECOND", displayText: "SECOND(time)", description: "Returns the second component of a specific time, in numeric format", category: "Date" },
  { "name": "TIME", displayText: "TIME(hour, minute, second)", description: "Converts a provided hour, minute, and second into a time", category: "Date" },
  { "name": "TIMEVALUE", displayText: "TIMEVALUE(time_string)", description: "Returns the fraction of a 24-hour day the time represents", category: "Date" },
  { "name": "TODAY", displayText: "TODAY()", description: "Returns the current date as a date value", category: "Date" },
  { "name": "WEEKDAY", displayText: "WEEKDAY(date, [type])", description: "Returns a number representing the day of the week of the date provided", category: "Date" },
  { "name": "WEEKNUM", displayText: "WEEKNUM(date, [type])", description: "Returns a number representing the week of the year where the provided date falls", category: "Date" },
  { "name": "WORKDAY", displayText: "WORKDAY(start_date, num_days, [holidays])", description: "Calculates the end date after a specified number of working days", category: "Date" },
  { "name": "WORKDAY.INTL", displayText: "WORKDAY.INTL(start_date, num_days, [weekend], [holidays])", description: "Calculates the date after a specified number of workdays excluding specified weekend days and holidays", category: "Date" },
  { "name": "YEAR", displayText: "YEAR(date)", description: "Returns the year specified by a given date", category: "Date" },
  { "name": "YEARFRAC", displayText: "YEARFRAC(start_date, end_date, [day_count_convention])", description: "Returns the number of years, including fractional years, between two dates using a specified day count convention", category: "Date" },
  { "name": "BIN2DEC", displayText: "BIN2DEC(signed_binary_number)", description: "Converts a signed binary number to decimal format", category: "Engineering" },
  { "name": "BIN2HEX", displayText: "BIN2HEX(signed_binary_number, [significant_digits])", description: "Converts a signed binary number to signed hexadecimal format", category: "Engineering" },
  { "name": "BIN2OCT", displayText: "BIN2OCT(signed_binary_number, [significant_digits])", description: "Converts a signed binary number to signed octal format", category: "Engineering" },
  { "name": "BITAND", displayText: "BITAND(value1, value2)", description: "Bitwise boolean AND of two numbers.", category: "Engineering" },
  { "name": "BITLSHIFT", displayText: "BITLSHIFT(value, shift_amount)", description: "Shifts the bits of the input a certain number of places to the left.", category: "Engineering" },
  { "name": "BITOR", displayText: "BITOR(value1, value2)", description: "Bitwise boolean OR of 2 numbers.", category: "Engineering" },
  { "name": "BITRSHIFT", displayText: "BITRSHIFT(value, shift_amount)", description: "Shifts the bits of the input a certain number of places to the right.", category: "Engineering" },
  { "name": "BITXOR", displayText: "BITXOR(value1, value2)", description: "Bitwise XOR (exclusive OR) of 2 numbers.", category: "Engineering" },
  { "name": "COMPLEX", displayText: "COMPLEX(real_part, imaginary_part, [suffix])", description: "Creates a complex number given real and imaginary coefficients", category: "Engineering" },
  { "name": "DEC2BIN", displayText: "DEC2BIN(decimal_number, [significant_digits])", description: "Converts a decimal number to signed binary format", category: "Engineering" },
  { "name": "DEC2HEX", displayText: "DEC2HEX(decimal_number, [significant_digits])", description: "Converts a decimal number to signed hexadecimal format", category: "Engineering" },
  { "name": "DEC2OCT", displayText: "DEC2OCT(decimal_number, [significant_digits])", description: "Converts a decimal number to signed octal format", category: "Engineering" },
  { "name": "DELTA", displayText: "DELTA(number1, [number2])", description: "Compare two numeric values, returning 1 if they're equal", category: "Engineering" },
  { "name": "ERF", displayText: "ERF(lower_bound, [upper_bound])", description: "The ERF function returns the integral of the Gauss error function over an interval of values.", category: "Engineering" },
  { "name": "ERF.PRECISE", displayText: "ERF.PRECISE(lower_bound, [upper_bound])", description: "SeeERF", category: "Engineering" },
  { "name": "GESTEP", displayText: "GESTEP(value, [step])", description: "Returns 1 if the rate is strictly greater than or equal to the provided step value or 0 otherwise. If no step value is provided then the default value of 0 will be used.", category: "Engineering" },
  { "name": "HEX2BIN", displayText: "HEX2BIN(signed_hexadecimal_number, [significant_digits])", description: "Converts a signed hexadecimal number to signed binary format", category: "Engineering" },
  { "name": "HEX2DEC", displayText: "HEX2DEC(signed_hexadecimal_number)", description: "Converts a signed hexadecimal number to decimal format", category: "Engineering" },
  { "name": "HEX2OCT", displayText: "HEX2OCT(signed_hexadecimal_number, significant_digits)", description: "Converts a signed hexadecimal number to signed octal format", category: "Engineering" },
  { "name": "IMABS", displayText: "IMABS(number)", description: "Returns absolute value of a complex number", category: "Engineering" },
  { "name": "IMAGINARY", displayText: "IMAGINARY(complex_number)", description: "Returns the imaginary coefficient of a complex number", category: "Engineering" },
  { "name": "IMARGUMENT", displayText: "IMARGUMENT(number)", description: "The IMARGUMENT function returns the angle (also known as the argument or \theta) of the given complex number in radians.", category: "Engineering" },
  { "name": "IMCONJUGATE", displayText: "IMCONJUGATE(number)", description: "Returns the complex conjugate of a number", category: "Engineering" },
  { "name": "IMCOS", displayText: "IMCOS(number)", description: "The IMCOS function returns the cosine of the given complex number.", category: "Engineering" },
  { "name": "IMCOSH", displayText: "IMCOSH(number)", description: "Returns the hyperbolic cosine of the given complex number. For example, a given complex number x+yi returns cosh(x+yi).Learn more.", category: "Engineering" },
  { "name": "IMCOT", displayText: "IMCOT(number)", description: "Returns the cotangent of the given complex number. For example, a given complex number x+yi returns cot(x+yi).Learn more.", category: "Engineering" },
  { "name": "IMCOTH", displayText: "IMCOTH(number)", description: "Returns the hyperbolic cotangent of the given complex number. For example, a given complex number x+yi returns coth(x+yi). Learn more.", category: "Engineering" },
  { "name": "IMCSC", displayText: "IMCSC(number)", description: "Returns the cosecant of the given complex number.", category: "Engineering" },
  { "name": "IMCSCH", displayText: "IMCSCH(number)", description: "Returns the hyperbolic cosecant of the given complex number. For example, a given complex number x+yi returns csch(x+yi). Learn more.", category: "Engineering" },
  { "name": "IMDIV", displayText: "IMDIV(dividend, divisor)", description: "Returns one complex number divided by another", category: "Engineering" },
  { "name": "IMEXP", displayText: "IMEXP(exponent)", description: "Returns Euler's number, e (~2.718) raised to a complex power.", category: "Engineering" },
  { "name": "IMLOG", displayText: "IMLOG(value, base)", description: "Returns the logarithm of a complex number for a specified base. Learn more.", category: "Engineering" },
  { "name": "IMLOG10", displayText: "IMLOG10(value)", description: "Returns the logarithm of a complex number with base 10. Learn more.", category: "Engineering" },
  { "name": "IMLOG2", displayText: "IMLOG2(value)", description: "Returns the logarithm of a complex number with base 2. Learn more.", category: "Engineering" },
  { "name": "IMPRODUCT", displayText: "IMPRODUCT(factor1, [factor2, ...])", description: "Returns the result of multiplying a series of complex numbers together", category: "Engineering" },
  { "name": "IMREAL", displayText: "IMREAL(complex_number)", description: "Returns the real coefficient of a complex number", category: "Engineering" },
  { "name": "IMSEC", displayText: "IMSEC(number)", description: "Returns the secant of the given complex number. For example, a given complex number x+yi returns sec(x+yi). Learn more.", category: "Engineering" },
  { "name": "IMSECH", displayText: "IMSECH(number)", description: "Returns the hyperbolic secant of the given complex number. For example, a given complex number x+yi returns sech(x+yi). Learn more.", category: "Engineering" },
  { "name": "IMSIN", displayText: "IMSIN (number)", description: "Returns the sine of the given complex number.", category: "Engineering" },
  { "name": "IMSINH", displayText: "IMSINH(number)", description: "Returns the hyperbolic sine of the given complex number. For example, a given complex number x+yi returns sinh(x+yi). Learn more.", category: "Engineering" },
  { "name": "IMSUB", displayText: "IMSUB(first_number, second_number)", description: "Returns the difference between two complex numbers", category: "Engineering" },
  { "name": "IMSUM", displayText: "IMSUM(value1, [value2, ...])", description: "Returns the sum of a series of complex numbers", category: "Engineering" },
  { "name": "IMTAN", displayText: "IMTAN(number)", description: "Returns the tangent of the given complex number.", category: "Engineering" },
  { "name": "IMTANH", displayText: "IMTANH(number)", description: "Returns the hyperbolic tangent of the given complex number. For example, a given complex number x+yi returns tanh(x+yi). Learn more.", category: "Engineering" },
  { "name": "OCT2BIN", displayText: "OCT2BIN(signed_octal_number, [significant_digits])", description: "Converts a signed octal number to signed binary format", category: "Engineering" },
  { "name": "OCT2DEC", displayText: "OCT2DEC(signed_octal_number)", description: "Converts a signed octal number to decimal format", category: "Engineering" },
  { "name": "OCT2HEX", displayText: "OCT2HEX(signed_octal_number, [significant_digits])", description: "Converts a signed octal number to signed hexadecimal format", category: "Engineering" },
  { "name": "FILTER", displayText: "FILTER(range, condition1, [condition2])", description: "Returns a filtered version of the source range, returning only rows or columns which meet the specified conditions", category: "Filter" },
  { "name": "SORT", displayText: "SORT(range, sort_column, is_ascending, [sort_column2], [is_ascending2])", description: "Sorts the rows of a given array or range by the values in one or more columns", category: "Filter" },
  { "name": "SORTN", displayText: "SORTN(range, [n], [display_ties_mode], [sort_column1, is_ascending1], ...)", description: "Returns the first n items in a data set after performing a sort", category: "Filter" },
  { "name": "UNIQUE", displayText: "UNIQUE(range)", description: "Returns unique rows in the provided source range, discarding duplicates. Rows are returned in the order in which they first appear in the source range", category: "Filter" },
  { "name": "ACCRINT", displayText: "ACCRINT(issue, first_payment, settlement, rate, redemption, frequency, [day_count_convention])", description: "Calculates the accrued interest of a security that has periodic payments", category: "Financial" },
  { "name": "ACCRINTM", displayText: "ACCRINTM(issue, maturity, rate, [redemption], [day_count_convention])", description: "Calculates the accrued interest of a security that pays interest at maturity", category: "Financial" },
  { "name": "AMORLINC", displayText: "AMORLINC(cost, purchase_date, first_period_end, salvage, period, rate, [basis])", description: "Returns the depreciation for an accounting period, or the prorated depreciation if the asset was purchased in the middle of a period.", category: "Financial" },
  { "name": "COUPDAYBS", displayText: "COUPDAYBS(settlement, maturity, frequency, [day_count_convention])", description: "Calculates the number of days from the first coupon, or interest payment, until settlement", category: "Financial" },
  { "name": "COUPDAYS", displayText: "COUPDAYS(settlement, maturity, frequency, [day_count_convention])", description: "Calculates the number of days in the coupon, or interest payment, period that contains the specified settlement date", category: "Financial" },
  { "name": "COUPDAYSNC", displayText: "COUPDAYSNC(settlement, maturity, frequency, [day_count_convention])", description: "Calculates the number of days from the settlement date until the next coupon, or interest payment", category: "Financial" },
  { "name": "COUPNCD", displayText: "COUPNCD(settlement, maturity, frequency, [day_count_convention])", description: "Calculates next coupon, or interest payment, date after the settlement date", category: "Financial" },
  { "name": "COUPNUM", displayText: "COUPNUM(settlement, maturity, frequency, [day_count_convention])", description: "Calculates the number of coupons, or interest payments, between the settlement date and the maturity date of the investment", category: "Financial" },
  { "name": "COUPPCD", displayText: "COUPPCD(settlement, maturity, frequency, [day_count_convention])", description: "Calculates last coupon, or interest payment, date before the settlement date", category: "Financial" },
  { "name": "CUMIPMT", displayText: "CUMIPMT(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)", description: "Calculates the cumulative interest over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate", category: "Financial" },
  { "name": "CUMPRINC", displayText: "CUMPRINC(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)", description: "Calculates the cumulative principal paid over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate", category: "Financial" },
  { "name": "DB", displayText: "DB(cost, salvage, life, period, [month])", description: "Calculates the depreciation of an asset for a specified period using the arithmetic declining balance method", category: "Financial" },
  { "name": "DDB", displayText: "DDB(cost, salvage, life, period, [factor])", description: "Calculates the depreciation of an asset for a specified period using the double-declining balance method", category: "Financial" },
  { "name": "DISC", displayText: "DISC(settlement, maturity, price, redemption, [day_count_convention])", description: "Calculates the discount rate of a security based on price", category: "Financial" },
  { "name": "DOLLARDE", displayText: "DOLLARDE(fractional_price, unit)", description: "Converts a price quotation given as a decimal fraction into a decimal value", category: "Financial" },
  { "name": "DOLLARFR", displayText: "DOLLARFR(decimal_price, unit)", description: "Converts a price quotation given as a decimal value into a decimal fraction", category: "Financial" },
  { "name": "DURATION", displayText: "DURATION(settlement, maturity, rate, yield, frequency, [day_count_convention]).", description: "Calculates the number of compounding periods required for an investment of a specified present value appreciating at a given rate to reach a target value", category: "Financial" },
  { "name": "EFFECT", displayText: "EFFECT(nominal_rate, periods_per_year)", description: "Calculates the annual effective interest rate given the nominal rate and number of compounding periods per year", category: "Financial" },
  { "name": "FV", displayText: "FV(rate, number_of_periods, payment_amount, [present_value], [end_or_beginning])", description: "Calculates the future value of an annuity investment based on constant-amount periodic payments and a constant interest rate", category: "Financial" },
  { "name": "FVSCHEDULE", displayText: "FVSCHEDULE(principal, rate_schedule)", description: "Calculates the future value of some principal based on a specified series of potentially varying interest rates", category: "Financial" },
  { "name": "INTRATE", displayText: "INTRATE(buy_date, sell_date, buy_price, sell_price, [day_count_convention])", description: "Calculates the effective interest rate generated when an investment is purchased at one price and sold at another with no interest or dividends generated by the investment itself", category: "Financial" },
  { "name": "IPMT", displayText: "IPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])", description: "Calculates the payment on interest for an investment based on constant-amount periodic payments and a constant interest rate", category: "Financial" },
  { "name": "IRR", displayText: "IRR(cashflow_amounts, [rate_guess])", description: "Calculates the internal rate of return on an investment based on a series of periodic cash flows", category: "Financial" },
  { "name": "ISPMT", displayText: "ISPMT(rate, period, number_of_periods, present_value)", description: "The ISPMT function calculates the interest paid during a particular period of an investment.", category: "Financial" },
  { "name": "MDURATION", displayText: "MDURATION(settlement, maturity, rate, yield, frequency, [day_count_convention])", description: "Calculates the modified Macaulay duration of a security paying periodic interest, such as a US Treasury Bond, based on expected yield", category: "Financial" },
  { "name": "MIRR", displayText: "MIRR(cashflow_amounts, financing_rate, reinvestment_return_rate)", description: "Calculates the modified internal rate of return on an investment based on a series of periodic cash flows and the difference between the interest rate paid on financing versus the return received on reinvested income", category: "Financial" },
  { "name": "NOMINAL", displayText: "NOMINAL(effective_rate, periods_per_year)", description: "Calculates the annual nominal interest rate given the effective rate and number of compounding periods per year", category: "Financial" },
  { "name": "NPER", displayText: "NPER(rate, payment_amount, present_value, [future_value], [end_or_beginning])", description: "Calculates the number of payment periods for an investment based on constant-amount periodic payments and a constant interest rate", category: "Financial" },
  { "name": "NPV", displayText: "NPV(discount, cashflow1, [cashflow2, ...])", description: "Calculates the net present value of an investment based on a series of periodic cash flows and a discount rate", category: "Financial" },
  { "name": "PDURATION", displayText: "PDURATION(rate, present_value, future_value)", description: "Returns the number of periods for an investment to reach a specific value at a given rate. Learn more.", category: "Financial" },
  { "name": "PMT", displayText: "PMT(rate, number_of_periods, present_value, [future_value], [end_or_beginning])", description: "Calculates the periodic payment for an annuity investment based on constant-amount periodic payments and a constant interest rate", category: "Financial" },
  { "name": "PPMT", displayText: "PPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])", description: "Calculates the payment on the principal of an investment based on constant-amount periodic payments and a constant interest rate", category: "Financial" },
  { "name": "PRICE", displayText: "PRICE(settlement, maturity, rate, yield, redemption, frequency, [day_count_convention])", description: "Calculates the price of a security paying periodic interest, such as a US Treasury Bond, based on expected yield", category: "Financial" },
  { "name": "PRICEDISC", displayText: "PRICEDISC(settlement, maturity, discount, redemption, [day_count_convention])", description: "Calculates the price of a discount (non-interest-bearing) security, based on expected yield", category: "Financial" },
  { "name": "PRICEMAT", displayText: "PRICEMAT(settlement, maturity, issue, rate, yield, [day_count_convention])", description: "Calculates the price of a security paying interest at maturity, based on expected yield", category: "Financial" },
  { "name": "PV", displayText: "PV(rate, number_of_periods, payment_amount, [future_value], [end_or_beginning])", description: "Calculates the present value of an annuity investment based on constant-amount periodic payments and a constant interest rate", category: "Financial" },
  { "name": "RATE", displayText: "RATE(number_of_periods, payment_per_period, present_value, [future_value], [end_or_beginning], [rate_guess])", description: "Calculates the interest rate of an annuity investment based on constant-amount periodic payments and the assumption of a constant interest rate", category: "Financial" },
  { "name": "RECEIVED", displayText: "RECEIVED(settlement, maturity, investment, discount, [day_count_convention])", description: "Calculates the amount received at maturity for an investment in fixed-income securities purchased on a given date", category: "Financial" },
  { "name": "RRI", displayText: "RRI(number_of_periods, present_value, future_value)", description: "Returns the interest rate needed for an investment to reach a specific value within a given number of periods. Learn more.", category: "Financial" },
  { "name": "SLN", displayText: "SLN(cost, salvage, life)", description: "Calculates the depreciation of an asset for one period using the straight-line method", category: "Financial" },
  { "name": "SYD", displayText: "SYD(cost, salvage, life, period)", description: "Calculates the depreciation of an asset for a specified period using the sum of years digits method", category: "Financial" },
  { "name": "TBILLEQ", displayText: "TBILLEQ(settlement, maturity, discount)", description: "Calculates the equivalent annualized rate of return of a US Treasury Bill based on discount rate", category: "Financial" },
  { "name": "TBILLPRICE", displayText: "TBILLPRICE(settlement, maturity, discount)", description: "Calculates the price of a US Treasury Bill based on discount rate", category: "Financial" },
  { "name": "TBILLYIELD", displayText: "TBILLYIELD(settlement, maturity, price)", description: "Calculates the yield of a US Treasury Bill based on price", category: "Financial" },
  { "name": "VDB", displayText: "VDB(cost, salvage, life, start_period, end_period, [factor], [no_switch])", description: "Returns the depreciation of an asset for a particular period (or partial period). Learn more.", category: "Financial" },
  { "name": "XIRR", displayText: "XIRR(cashflow_amounts, cashflow_dates, [rate_guess])", description: "Calculates the internal rate of return of an investment based on a specified series of potentially irregularly spaced cash flows", category: "Financial" },
  { "name": "XNPV", displayText: "XNPV(discount, cashflow_amounts, cashflow_dates)", description: "Calculates the net present value of an investment based on a specified series of potentially irregularly spaced cash flows and a discount rate", category: "Financial" },
  { "name": "YIELD", displayText: "YIELD(settlement, maturity, rate, price, redemption, frequency, [day_count_convention])", description: "Calculates the annual yield of a security paying periodic interest, such as a US Treasury Bond, based on price", category: "Financial" },
  { "name": "YIELDDISC", displayText: "YIELDDISC(settlement, maturity, price, redemption, [day_count_convention])", description: "Calculates the annual yield of a discount (non-interest-bearing) security, based on price", category: "Financial" },
  { "name": "YIELDMAT", displayText: "YIELDMAT(settlement, maturity, issue, rate, price, [day_count_convention])", description: "Calculates the annual yield of a security paying interest at maturity, based on price", category: "Financial" },
  { "name": "ARRAYFORMULA", displayText: "ARRAYFORMULA(array_formula)", description: "Enables the display of values returned from an array formula into multiple rows and/or columns and the use of non-array functions with arrays", category: "Google" },
  { "name": "DETECTLANGUAGE", displayText: "DETECTLANGUAGE(text_or_range)", description: "Identifies the language used in text within the specified range", category: "Google" },
  { "name": "GOOGLEFINANCE", displayText: "GOOGLEFINANCE(ticker, [attribute], [start_date], [end_date|num_days], [interval])", description: "Fetches current or historical securities information from Google Finance", category: "Google" },
  { "name": "GOOGLETRANSLATE", displayText: "GOOGLETRANSLATE(text, [source_language], [target_language])", description: "Translates text from one language into another Learn more", category: "Google" },
  { "name": "IMAGE", displayText: "IMAGE(url, [mode], [height], [width])", description: "Inserts an image into a cell", category: "Google" },
  { "name": "QUERY", displayText: "QUERY(data, query, [headers])", description: "Runs a Google Visualization API Query Language query across data", category: "Google" },
  { "name": "SPARKLINE", displayText: "SPARKLINE(data, [options])", description: "Creates a miniature chart contained within a single cell", category: "Google" },
  { "name": "ERROR.TYPE", displayText: "ERROR.TYPE(reference)", description: "Returns a number corresponding to the error value in a different cell", category: "Info" },
  { "name": "ISBLANK", displayText: "ISBLANK(value)", description: "Checks whether the referenced cell is empty", category: "Info" },
  { "name": "ISDATE", displayText: "ISDATE(value)", description: "Returns whether a value is a date.", category: "Info" },
  { "name": "ISEMAIL", displayText: "ISEMAIL(value)", description: "Checks whether a value is a valid email address", category: "Info" },
  { "name": "ISERR", displayText: "ISERR(value)", description: "Checks whether a value is an error other than `#N/A`", category: "Info" },
  { "name": "ISERROR", displayText: "ISERROR(value)", description: "Checks whether a value is an error", category: "Info" },
  { "name": "ISFORMULA", displayText: "ISFORMULA(cell)", description: "Checks whether a formula is in the referenced cell", category: "Info" },
  { "name": "ISLOGICAL", displayText: "ISLOGICAL(value)", description: "Checks whether a value is `TRUE` or `FALSE`", category: "Info" },
  { "name": "ISNA", displayText: "ISNA(value)", description: "Checks whether a value is the error `#N/A`", category: "Info" },
  { "name": "ISNONTEXT", displayText: "ISNONTEXT(value)", description: "Checks whether a value is non-textual", category: "Info" },
  { "name": "ISNUMBER", displayText: "ISNUMBER(value)", description: "Checks whether a value is a number", category: "Info" },
  { "name": "ISREF", displayText: "ISREF(value)", description: "Checks whether a value is a valid cell reference", category: "Info" },
  { "name": "ISTEXT", displayText: "ISTEXT(value)", description: "Checks whether a value is text", category: "Info" },
  { "name": "N", displayText: "N(value)", description: "Returns the argument provided as a number", category: "Info" },
  { "name": "NA", displayText: "NA()", description: "Returns the value not available error, `#N/A`", category: "Info" },
  { "name": "TYPE", displayText: "TYPE(value)", description: "Returns a number associated with the type of data passed into the function", category: "Info" },
  { "name": "CELL", displayText: "CELL(info_type, reference)", description: "Returns the requested information about the specified cell", category: "Info" },
  { "name": "AND", displayText: "AND(logical_expression1, [logical_expression2, ...])", description: "Returns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false", category: "Logical" },
  { "name": "FALSE", displayText: "FALSE()", description: "Returns the logical value `FALSE`", category: "Logical" },
  { "name": "IF", displayText: "IF(logical_expression, value_if_true, value_if_false)", description: "Returns one value if a logical expression is `TRUE` and another if it is `FALSE`", category: "Logical" },
  { "name": "IFERROR", displayText: "IFERROR(value, [value_if_error])", description: "Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent. Learn more", category: "Logical" },
  { "name": "IFNA", displayText: "IFNA(value, value_if_na)", description: "Evaluates a value. If the value is an #N/A error, returns the specified value.", category: "Logical" },
  { "name": "IFS", displayText: "IFS(condition1, value1, [condition2, value2], …)", description: "Evaluates multiple conditions and returns a value that corresponds to the first true condition.", category: "Logical" },
  { "name": "NOT", displayText: "NOT(logical_expression)", description: "Returns the opposite of a logical value - `NOT(TRUE)` returns `FALSE`; `NOT(FALSE)` returns `TRUE`", category: "Logical" },
  { "name": "OR", displayText: "OR(logical_expression1, [logical_expression2, ...])", description: "Returns true if any of the provided arguments are logically true, and false if all of the provided arguments are logically false", category: "Logical" },
  { "name": "SWITCH", displayText: "SWITCH(expression, case1, value1, [default or case2, value2], …)", description: "Tests an expression against a list of cases and returns the corresponding value of the first matching case, with an optional default value if nothing else is met", category: "Logical" },
  { "name": "TRUE", displayText: "TRUE()", description: "Returns the logical value `TRUE`", category: "Logical" },
  { "name": "XOR", displayText: "XOR(logical_expression1, [logical_expression2, ...])", description: "The XOR function performs an exclusive or of 2 numbers that returns a 1 if the numbers are different, and a 0 otherwise.", category: "Logical" },
  { "name": "ADDRESS", displayText: "ADDRESS(row, column, [absolute_relative_mode], [use_a1_notation], [sheet])", description: "Returns a cell reference as a string", category: "Lookup" },
  { "name": "CHOOSE", displayText: "CHOOSE(index, choice1, [choice2, ...])", description: "Returns an element from a list of choices based on index", category: "Lookup" },
  { "name": "COLUMN", displayText: "COLUMN([cell_reference])", description: "Returns the column number of a specified cell, with `A=1`", category: "Lookup" },
  { "name": "COLUMNS", displayText: "COLUMNS(range)", description: "Returns the number of columns in a specified array or range", category: "Lookup" },
  { "name": "FORMULATEXT", displayText: "FORMULATEXT(cell)", description: "Returns the formula as a string. Learn more.", category: "Lookup" },
  { "name": "GETPIVOTDATA", displayText: "GETPIVOTDATA(value_name, any_pivot_table_cell, [original_column, ...], [pivot_item, ...]", description: "Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings", category: "Lookup" },
  { "name": "HLOOKUP", displayText: "HLOOKUP(search_key, range, index, [is_sorted])", description: "Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found", category: "Lookup" },
  { "name": "INDEX", displayText: "INDEX(reference, [row], [column])", description: "Returns the content of a cell, specified by row and column offset", category: "Lookup" },
  { "name": "INDIRECT", displayText: "INDIRECT(cell_reference_as_string, [is_A1_notation])", description: "Returns a cell reference specified by a string", category: "Lookup" },
  { "name": "LOOKUP", displayText: "LOOKUP(search_key, search_range|search_result_array, [result_range])", description: "Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column", category: "Lookup" },
  { "name": "MATCH", displayText: "MATCH(search_key, range, [search_type])", description: "Returns the relative position of an item in a range that matches a specified value", category: "Lookup" },
  { "name": "OFFSET", displayText: "OFFSET(cell_reference, offset_rows, offset_columns, [height], [width])", description: "Returns a range reference shifted a specified number of rows and columns from a starting cell reference", category: "Lookup" },
  { "name": "ROW", displayText: "ROW([cell_reference])", description: "Returns the row number of a specified cell", category: "Lookup" },
  { "name": "ROWS", displayText: "ROWS(range)", description: "Returns the number of rows in a specified array or range", category: "Lookup" },
  { "name": "VLOOKUP", displayText: "VLOOKUP(search_key, range, index, [is_sorted])", description: "Vertical lookup. Searches down the first column of a range for a key and returns the value of a specified cell in the row found", category: "Lookup" },
  { "name": "ABS", displayText: "ABS(value)", description: "Returns the absolute value of a number", category: "Math" },
  { "name": "ACOS", displayText: "ACOS(value)", description: "Returns the inverse cosine of a value, in radians", category: "Math" },
  { "name": "ACOSH", displayText: "ACOSH(value)", description: "Returns the inverse hyperbolic cosine of a number", category: "Math" },
  { "name": "ACOT", displayText: "ACOT(value)", description: "Returns the inverse cotangent of a value, in radians.", category: "Math" },
  { "name": "ACOTH", displayText: "ACOTH(value)", description: "Returns the inverse hyperbolic cotangent of a value, in radians. Must not be between -1 and 1, inclusive.", category: "Math" },
  { "name": "ASIN", displayText: "ASIN(value)", description: "Returns the inverse sine of a value, in radians", category: "Math" },
  { "name": "ASINH", displayText: "ASINH(value)", description: "Returns the inverse hyperbolic sine of a number", category: "Math" },
  { "name": "ATAN", displayText: "ATAN(value)", description: "Returns the inverse tangent of a value, in radians", category: "Math" },
  { "name": "ATAN2", displayText: "ATAN2(x, y)", description: "Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair (`x`,`y`), in radians", category: "Math" },
  { "name": "ATANH", displayText: "ATANH(value)", description: "Returns the inverse hyperbolic tangent of a number", category: "Math" },
  { "name": "BASE", displayText: "BASE(value, base, [min_length])", description: "Converts a number into a text representation in another base, for example, base 2 for binary.", category: "Math" },
  { "name": "CEILING", displayText: "CEILING(value, [factor])", description: "Rounds a number up to the nearest integer multiple of specified significance", category: "Math" },
  { "name": "CEILING.MATH", displayText: "CEILING.MATH(number, [significance], [mode])", description: "Rounds a number up to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from 0 depending on the mode.", category: "Math" },
  { "name": "CEILING.PRECISE", displayText: "CEILING.PRECISE(number, [significance])", description: "Rounds a number up to the nearest integer multiple of specified significance. If the number is positive or negative, it is rounded up.", category: "Math" },
  { "name": "COMBIN", displayText: "COMBIN(n, k)", description: "Returns the number of ways to choose some number of objects from a pool of a given size of objects", category: "Math" },
  { "name": "COMBINA", displayText: "COMBINA(n, k)", description: "Returns the number of ways to choose some number of objects from a pool of a given size of objects, including ways that choose the same object multiple times.", category: "Math" },
  { "name": "COS", displayText: "COS(angle)", description: "Returns the cosine of an angle provided in radians", category: "Math" },
  { "name": "COSH", displayText: "COSH(value)", description: "Returns the hyperbolic cosine of any real number", category: "Math" },
  { "name": "COT", displayText: "COT(angle)", description: "Cotangent of an angle provided in radians.", category: "Math" },
  { "name": "COTH", displayText: "COTH(value)", description: "Returns the hyperbolic cotangent of any real number.", category: "Math" },
  { "name": "COUNTBLANK", displayText: "COUNTBLANK(range)", description: "Returns the number of empty cells in a given range", category: "Math" },
  { "name": "COUNTIF", displayText: "COUNTIF(range, criterion)", description: "Returns a conditional count across a range", category: "Math" },
  { "name": "COUNTIFS", displayText: "COUNTIFS(criteria_range1, criterion1, [criteria_range2, criterion2, ...])", description: "Returns the count of a range depending on multiple criteria", category: "Math" },
  { "name": "COUNTUNIQUE", displayText: "COUNTUNIQUE(value1, [value2, ...])", description: "Counts the number of unique values in a list of specified values and ranges", category: "Math" },
  { "name": "CSC", displayText: "CSC(angle)", description: "Returns the cosecant of an angle provided in radians.", category: "Math" },
  { "name": "CSCH", displayText: "CSCH(value)", description: "The CSCH function returns the hyperbolic cosecant of any real number.", category: "Math" },
  { "name": "DECIMAL", displayText: "DECIMAL(value, base)", description: "The DECIMAL function converts the text representation of a number in another base, to base 10 (decimal).", category: "Math" },
  { "name": "DEGREES", displayText: "DEGREES(angle)", description: "Converts an angle value in radians to degrees", category: "Math" },
  { "name": "ERFC", displayText: "ERFC(z)", description: "Returns the complementary Gauss error function of a value", category: "Math" },
  { "name": "ERFC.PRECISE", displayText: "ERFC.PRECISE(z)", description: "SeeERFC", category: "Math" },
  { "name": "EVEN", displayText: "EVEN(value)", description: "Rounds a number up to the nearest even integer", category: "Math" },
  { "name": "EXP", displayText: "EXP(exponent)", description: "Returns Euler's number, e (~2.718) raised to a power", category: "Math" },
  { "name": "FACT", displayText: "FACT(value)", description: "Returns the factorial of a number", category: "Math" },
  { "name": "FACTDOUBLE", displayText: "FACTDOUBLE(value)", description: "Returns the double factorial of a number", category: "Math" },
  { "name": "FLOOR", displayText: "FLOOR(value, [factor])", description: "Rounds a number down to the nearest integer multiple of specified significance", category: "Math" },
  { "name": "FLOOR.MATH", displayText: "FLOOR.MATH(number, [significance], [mode])", description: "Rounds a number down to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from 0 depending on the mode.", category: "Math" },
  { "name": "FLOOR.PRECISE", displayText: "FLOOR.PRECISE(number, [significance])", description: "The FLOOR.PRECISE function rounds a number down to the nearest integer or multiple of specified significance.", category: "Math" },
  { "name": "GAMMALN", displayText: "GAMMALN(value)", description: "Returns the the logarithm of a specified Gamma function, base e (Euler's number)", category: "Math" },
  { "name": "GAMMALN.PRECISE", displayText: "GAMMALN.PRECISE(value)", description: "SeeGAMMALN", category: "Math" },
  { "name": "GCD", displayText: "GCD(value1, value2)", description: "Returns the greatest common divisor of one or more integers", category: "Math" },
  { "name": "IMLN", displayText: "IMLN(complex_value)", description: "Returns the logarithm of a complex number, base e (Euler's number)", category: "Math" },
  { "name": "IMPOWER", displayText: "IMPOWER(complex_base, exponent)", description: "Returns a complex number raised to a power", category: "Math" },
  { "name": "IMSQRT", displayText: "IMSQRT(complex_number)", description: "Computes the square root of a complex number", category: "Math" },
  { "name": "INT", displayText: "INT(value)", description: "Rounds a number down to the nearest integer that is less than or equal to it", category: "Math" },
  { "name": "ISEVEN", displayText: "ISEVEN(value)", description: "Checks whether the provided value is even", category: "Math" },
  { "name": "ISO.CEILING", displayText: "ISO.CEILING(number, [significance])", description: "SeeCEILING.PRECISE", category: "Math" },
  { "name": "ISODD", displayText: "ISODD(value)", description: "Checks whether the provided value is odd", category: "Math" },
  { "name": "LCM", displayText: "LCM(value1, value2)", description: "Returns the least common multiple of one or more integers", category: "Math" },
  { "name": "LN", displayText: "LN(value)", description: "Returns the the logarithm of a number, base e (Euler's number)", category: "Math" },
  { "name": "LOG", displayText: "LOG(value, base)", description: "Returns the the logarithm of a number given a base", category: "Math" },
  { "name": "LOG10", displayText: "LOG10(value)", description: "Returns the the logarithm of a number, base 10", category: "Math" },
  { "name": "MOD", displayText: "MOD(dividend, divisor)", description: "Returns the result of the modulo operator, the remainder after a division operation", category: "Math" },
  { "name": "MROUND", displayText: "MROUND(value, factor)", description: "Rounds one number to the nearest integer multiple of another. Learn more", category: "Math" },
  { "name": "MULTINOMIAL", displayText: "MULTINOMIAL(value1, value2)", description: "Returns the factorial of the sum of values divided by the product of the values' factorials", category: "Math" },
  { "name": "MUNIT", displayText: "MUNIT(dimension)", description: "Returns a unit matrix of size dimension x dimension. Learn more.", category: "Math" },
  { "name": "ODD", displayText: "ODD(value)", description: "Rounds a number up to the nearest odd integer", category: "Math" },
  { "name": "PI", displayText: "PI()", description: "Returns the value of Pi to 14 decimal places", category: "Math" },
  { "name": "POWER", displayText: "POWER(base, exponent)", description: "Returns a number raised to a power", category: "Math" },
  { "name": "PRODUCT", displayText: "PRODUCT(factor1, [factor2, ...])", description: "Returns the result of multiplying a series of numbers together", category: "Math" },
  { "name": "QUOTIENT", displayText: "QUOTIENT(dividend, divisor)", description: "Returns one number divided by another", category: "Math" },
  { "name": "RADIANS", displayText: "RADIANS(angle)", description: "Converts an angle value in degrees to radians", category: "Math" },
  { "name": "RAND", displayText: "RAND()", description: "Returns a random number between 0 inclusive and 1 exclusive", category: "Math" },
  { "name": "RANDARRAY", displayText: "RANDARRAY(rows, columns)", description: "Generates an array of random numbers between 0 and 1. Learn more.", category: "Math" },
  { "name": "RANDBETWEEN", displayText: "RANDBETWEEN(low, high)", description: "Returns a uniformly random integer between two values, inclusive", category: "Math" },
  { "name": "ROUND", displayText: "ROUND(value, [places])", description: "Rounds a number to a certain number of decimal places according to standard rules", category: "Math" },
  { "name": "ROUNDDOWN", displayText: "ROUNDDOWN(value, [places])", description: "Rounds a number to a certain number of decimal places, always rounding down to the next valid increment", category: "Math" },
  { "name": "ROUNDUP", displayText: "ROUNDUP(value, [places])", description: "Rounds a number to a certain number of decimal places, always rounding up to the next valid increment", category: "Math" },
  { "name": "SEC", displayText: "SEC(angle)", description: "The SEC function returns the secant of an angle, measured in radians.", category: "Math" },
  { "name": "SECH", displayText: "SECH(value)", description: "The SECH function returns the hyperbolic secant of an angle", category: "Math" },
  { "name": "SEQUENCE", displayText: "SEQUENCE(rows, columns, start, step)", description: "Returns an array of sequential numbers, such as 1, 2, 3, 4. Learn more.", category: "Math" },
  { "name": "SERIESSUM", displayText: "SERIESSUM(x, n, m, a)", description: "Given parametersx,n,m, anda, returns the power series sum a1xn+ a2x(n+m)+ ... + aix(n+(i-1)m), where i is the number of entries in range `a`", category: "Math" },
  { "name": "SIGN", displayText: "SIGN(value)", description: "Given an input number, returns `-1` if it is negative, `1` if positive, and `0` if it is zero", category: "Math" },
  { "name": "SIN", displayText: "SIN(angle)", description: "Returns the sine of an angle provided in radians", category: "Math" },
  { "name": "SINH", displayText: "SINH(value)", description: "Returns the hyperbolic sine of any real number", category: "Math" },
  { "name": "SQRT", displayText: "SQRT(value)", description: "Returns the positive square root of a positive number", category: "Math" },
  { "name": "SQRTPI", displayText: "SQRTPI(value)", description: "Returns the positive square root of the product of Pi and the given positive number", category: "Math" },
  { "name": "SUBTOTAL", displayText: "SUBTOTAL(function_code, range1, [range2, ...])", description: "Returns a subtotal for a vertical range of cells using a specified aggregation function", category: "Math" },
  { "name": "SUM", displayText: "SUM(value1, [value2, ...])", description: "Returns the sum of a series of numbers and/or cells", category: "Math" },
  { "name": "SUMIF", displayText: "SUMIF(range, criterion, [sum_range])", description: "Returns a conditional sum across a range. Learn more", category: "Math" },
  { "name": "SUMIFS", displayText: "SUMIFS(sum_range, criteria_range1, criterion1, [criteria_range2, criterion2, ...])", description: "Returns the sum of a range depending on multiple criteria", category: "Math" },
  { "name": "SUMSQ", displayText: "SUMSQ(value1, [value2, ...])", description: "Returns the sum of the squares of a series of numbers and/or cells", category: "Math" },
  { "name": "TAN", displayText: "TAN(angle)", description: "Returns the tangent of an angle provided in radians", category: "Math" },
  { "name": "TANH", displayText: "TANH(value)", description: "Returns the hyperbolic tangent of any real number", category: "Math" },
  { "name": "TRUNC", displayText: "TRUNC(value, [places])", description: "Truncates a number to a certain number of significant digits by omitting less significant digits", category: "Math" },
  { "name": "ADD", displayText: "ADD(value1, value2)", description: "Returns the sum of two numbers. Equivalent to the `+` operator", category: "Operator" },
  { "name": "CONCAT", displayText: "CONCAT(value1, value2)", description: "Returns the concatenation of two values. Equivalent to the `&` operator", category: "Operator" },
  { "name": "DIVIDE", displayText: "DIVIDE(dividend, divisor)", description: "Returns one number divided by another. Equivalent to the `/` operator", category: "Operator" },
  { "name": "EQ", displayText: "EQ(value1, value2)", description: "Returns `TRUE` if two specified values are equal and `FALSE` otherwise. Equivalent to the `=` operator", category: "Operator" },
  { "name": "GT", displayText: "GT(value1, value2)", description: "Returns `TRUE` if the first argument is strictly greater than the second, and `FALSE` otherwise. Equivalent to the `>` operator", category: "Operator" },
  { "name": "GTE", displayText: "GTE(value1, value2)", description: "Returns `TRUE` if the first argument is greater than or equal to the second, and `FALSE` otherwise. Equivalent to the `>=` operator", category: "Operator" },
  { "name": "LT", displayText: "LT(value1, value2)", description: "Returns `TRUE` if the first argument is strictly less than the second, and `FALSE` otherwise. Equivalent to the `<` operator", category: "Operator" },
  { "name": "LTE", displayText: "LTE(value1, value2)", description: "Returns `TRUE` if the first argument is less than or equal to the second, and `FALSE` otherwise. Equivalent to the `<=` operator", category: "Operator" },
  { "name": "MINUS", displayText: "MINUS(value1, value2)", description: "Returns the difference of two numbers. Equivalent to the `-` operator", category: "Operator" },
  { "name": "MULTIPLY", displayText: "MULTIPLY(factor1, factor2)", description: "Returns the product of two numbers. Equivalent to the `*` operator", category: "Operator" },
  { "name": "NE", displayText: "NE(value1, value2)", description: "Returns `TRUE` if two specified values are not equal and `FALSE` otherwise. Equivalent to the `<>` operator", category: "Operator" },
  { "name": "POW", displayText: "POW(base, exponent)", description: "Returns a number raised to a power", category: "Operator" },
  { "name": "UMINUS", displayText: "UMINUS(value)", description: "Returns a number with the sign reversed", category: "Operator" },
  { "name": "UNARY_PERCENT", displayText: "UNARY_PERCENT(percentage)", description: "Returns a value interpreted as a percentage; that is, `UNARY_PERCENT(100)` equals `1`", category: "Operator" },
  { "name": "UPLUS", displayText: "UPLUS(value)", description: "Returns a specified number, unchanged. Learn more", category: "Operator" },
  { "name": "CONVERT", displayText: "CONVERT(value, start_unit, end_unit)", description: "Converts a numeric value to a different unit of measure", category: "Parser" },
  { "name": "TO_DATE", displayText: "TO_DATE(value)", description: "Converts a provided number to a date", category: "Parser" },
  { "name": "TO_DOLLARS", displayText: "TO_DOLLARS(value)", description: "Converts a provided number to a dollar value", category: "Parser" },
  { "name": "TO_PERCENT", displayText: "TO_PERCENT(value)", description: "Converts a provided number to a percentage", category: "Parser" },
  { "name": "TO_PURE_NUMBER", displayText: "TO_PURE_NUMBER(value)", description: "Converts a provided date/time, percentage, currency or other formatted numeric value to a pure number without formatting", category: "Parser" },
  { "name": "TO_TEXT", displayText: "TO_TEXT(value)", description: "Converts a provided numeric value to a text value", category: "Parser" },
  { "name": "AVEDEV", displayText: "AVEDEV(value1, [value2, ...])", description: "Calculates the average of the magnitudes of deviations of data from a dataset's mean", category: "Statistical" },
  { "name": "AVERAGE", displayText: "AVERAGE(value1, [value2, ...])", description: "Returns the numerical average value in a dataset, ignoring text", category: "Statistical" },
  { "name": "AVERAGE.WEIGHTED", displayText: "AVERAGE.WEIGHTED(values, weights, [additional values], [additional weights])", description: "Finds the weighted average of a set of values, given the values and the corresponding weights.", category: "Statistical" },
  { "name": "AVERAGEA", displayText: "AVERAGEA(value1, [value2, ...])", description: "Returns the numerical average value in a dataset", category: "Statistical" },
  { "name": "AVERAGEIF", displayText: "AVERAGEIF(criteria_range, criterion, [average_range])", description: "Returns the average of a range depending on criteria", category: "Statistical" },
  { "name": "AVERAGEIFS", displayText: "AVERAGEIFS(average_range, criteria_range1, criterion1, [criteria_range2, criterion2, ...])", description: "Returns the average of a range depending on multiple criteria", category: "Statistical" },
  { "name": "BETA.DIST", displayText: "BETA.DIST(value, alpha, beta, cumulative, lower_bound, upper_bound)", description: "Returns the probability of a given value as defined by the beta distribution function.", category: "Statistical" },
  { "name": "BETA.INV", displayText: "BETA.INV(probability, alpha, beta, lower_bound, upper_bound)", description: "Returns the value of the inverse beta distribution function for a given probability.", category: "Statistical" },
  { "name": "BETADIST", displayText: "BETADIST(value, alpha, beta, lower_bound, upper_bound)", description: "See BETA.DIST.", category: "Statistical" },
  { "name": "BETAINV", displayText: "BETAINV(probability, alpha, beta, lower_bound, upper_bound)", description: "See BETA.INV", category: "Statistical" },
  { "name": "BINOM.DIST", displayText: "BINOM.DIST(num_successes, num_trials, prob_success, cumulative)", description: "See BINOMDIST", category: "Statistical" },
  { "name": "BINOM.INV", displayText: "BINOM.INV(num_trials, prob_success, target_prob)", description: "SeeCRITBINOM", category: "Statistical" },
  { "name": "BINOMDIST", displayText: "BINOMDIST(num_successes, num_trials, prob_success, cumulative)", description: "Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws", category: "Statistical" },
  { "name": "CHIDIST", displayText: "CHIDIST(x, degrees_freedom)", description: "Calculates the right-tailed chi-squared distribution, often used in hypothesis testing", category: "Statistical" },
  { "name": "CHIINV", displayText: "CHIINV(probability, degrees_freedom)", description: "Calculates the inverse of the right-tailed chi-squared distribution", category: "Statistical" },
  { "name": "CHISQ.DIST", displayText: "CHISQ.DIST(x, degrees_freedom, cumulative)", description: "Calculates the left-tailed chi-squared distribution, often used in hypothesis testing", category: "Statistical" },
  { "name": "CHISQ.DIST.RT", displayText: "CHISQ.DIST.RT(x, degrees_freedom)", description: "Calculates the right-tailed chi-squared distribution, which is commonly used in hypothesis testing", category: "Statistical" },
  { "name": "CHISQ.INV", displayText: "CHISQ.INV(probability, degrees_freedom)", description: "Calculates the inverse of the left-tailed chi-squared distribution", category: "Statistical" },
  { "name": "CHISQ.INV.RT", displayText: "CHISQ.INV.RT(probability, degrees_freedom)", description: "Calculates the inverse of the right-tailed chi-squared distribution", category: "Statistical" },
  { "name": "CHISQ.TEST", displayText: "CHISQ.TEST(observed_range, expected_range)", description: "SeeCHITEST", category: "Statistical" },
  { "name": "CHITEST", displayText: "CHITEST(observed_range, expected_range)", description: "Returns the probability associated with a Pearson’s chi-squared test on the two ranges of data. Determines the likelihood that the observed categorical data is drawn from an expected distribution", category: "Statistical" },
  { "name": "CONFIDENCE", displayText: "CONFIDENCE(alpha, standard_deviation, pop_size)", description: "SeeCONFIDENCE.NORM", category: "Statistical" },
  { "name": "CONFIDENCE.NORM", displayText: "CONFIDENCE.NORM(alpha, standard_deviation, pop_size)", description: "Calculates the width of half the confidence interval for a normal distribution.", category: "Statistical" },
  { "name": "CONFIDENCE.T", displayText: "CONFIDENCE.T(alpha, standard_deviation, size)", description: "Calculates the width of half the confidence interval for a Student’s t-distribution.", category: "Statistical" },
  { "name": "CORREL", displayText: "CORREL(data_y, data_x)", description: "Calculates r, the Pearson product-moment correlation coefficient of a dataset", category: "Statistical" },
  { "name": "COUNT", displayText: "COUNT(value1, [value2, ...])", description: "Returns a count of the number of numeric values in a dataset", category: "Statistical" },
  { "name": "COUNTA", displayText: "COUNTA(value1, [value2, ...])", description: "Returns a count of the number of values in a dataset", category: "Statistical" },
  { "name": "COVAR", displayText: "COVAR(data_y, data_x)", description: "Calculates the covariance of a dataset", category: "Statistical" },
  { "name": "COVARIANCE.P", displayText: "COVARIANCE.P(data_y, data_x)", description: "SeeCOVAR", category: "Statistical" },
  { "name": "COVARIANCE.S", displayText: "COVARIANCE.S(data_y, data_x)", description: "Calculates the covariance of a dataset, where the dataset is a sample of the total population.", category: "Statistical" },
  { "name": "CRITBINOM", displayText: "CRITBINOM(num_trials, prob_success, target_prob)", description: "Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria", category: "Statistical" },
  { "name": "DEVSQ", displayText: "DEVSQ(value1, value2)", description: "Calculates the sum of squares of deviations based on a sample", category: "Statistical" },
  { "name": "EXPON.DIST", displayText: "EXPON.DIST(x, lambda, cumulative)", description: "Returns the value of the exponential distribution function with a specified lambda at a specified value.", category: "Statistical" },
  { "name": "EXPONDIST", displayText: "EXPONDIST(x, lambda, cumulative)", description: "See EXPON.DIST", category: "Statistical" },
  { "name": "F.DIST", displayText: "F.DIST(x, degrees_freedom1, degrees_freedom2, cumulative)", description: "Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution", category: "Statistical" },
  { "name": "F.DIST.RT", displayText: "F.DIST.RT(x, degrees_freedom1, degrees_freedom2)", description: "Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution", category: "Statistical" },
  { "name": "F.INV", displayText: "F.INV(probability, degrees_freedom1, degrees_freedom2)", description: "Calculates the inverse of the left-tailed F probability distribution. Also called the Fisher-Snedecor distribution or Snedecor’s F distribution", category: "Statistical" },
  { "name": "F.INV.RT", displayText: "F.INV.RT(probability, degrees_freedom1, degrees_freedom2)", description: "Calculates the inverse of the right-tailed F probability distribution. Also called the Fisher-Snedecor distribution or Snedecor’s F distribution", category: "Statistical" },
  { "name": "F.TEST", displayText: "F.TEST(range1, range2)", description: "SeeFTEST.", category: "Statistical" },
  { "name": "FDIST", displayText: "FDIST(x, degrees_freedom1, degrees_freedom2)", description: "See F.DIST.RT.", category: "Statistical" },
  { "name": "FINV", displayText: "FINV(probability, degrees_freedom1, degrees_freedom2)", description: "SeeF.INV.RT", category: "Statistical" },
  { "name": "FISHER", displayText: "FISHER(value)", description: "Returns the Fisher transformation of a specified value", category: "Statistical" },
  { "name": "FISHERINV", displayText: "FISHERINV(value)", description: "Returns the inverse Fisher transformation of a specified value", category: "Statistical" },
  { "name": "FORECAST", displayText: "FORECAST(x, data_y, data_x)", description: "Calculates the expected y-value for a specified x based on a linear regression of a dataset", category: "Statistical" },
  { "name": "FORECAST.LINEAR", displayText: "FORECAST.LINEAR(x, data_y, data_x)", description: "SeeFORECAST", category: "Statistical" },
  { "name": "FTEST", displayText: "FTEST(range1, range2)", description: "Returns the probability associated with an F-test for equality of variances. Determines whether two samples are likely to have come from populations with the same variance", category: "Statistical" },
  { "name": "GAMMA", displayText: "GAMMA(number)", description: "Returns the Gamma function evaluated at the specified value.", category: "Statistical" },
  { "name": "GAMMA.DIST", displayText: "GAMMA.DIST(x, alpha, beta, cumulative)", description: "Calculates the gamma distribution, a two-parameter continuous probability distribution", category: "Statistical" },
  { "name": "GAMMA.INV", displayText: "GAMMA.INV(probability, alpha, beta)", description: "The GAMMA.INV function returns the value of the inverse gamma cumulative distribution function for the specified probability and alpha and beta parameters.", category: "Statistical" },
  { "name": "GAMMADIST", displayText: "GAMMADIST(x, alpha, beta, cumulative)", description: "See GAMMA.DIST", category: "Statistical" },
  { "name": "GAMMAINV", displayText: "GAMMAINV(probability, alpha, beta)", description: "See GAMMA.INV.", category: "Statistical" },
  { "name": "GAUSS", displayText: "GAUSS(z)", description: "The GAUSS function returns the probability that a random variable, drawn from a normal distribution, will be between the mean and z standard deviations above (or below) the mean.", category: "Statistical" },
  { "name": "GEOMEAN", displayText: "GEOMEAN(value1, value2)", description: "Calculates the geometric mean of a dataset", category: "Statistical" },
  { "name": "HARMEAN", displayText: "HARMEAN(value1, value2)", description: "Calculates the harmonic mean of a dataset", category: "Statistical" },
  { "name": "HYPGEOM.DIST", displayText: "HYPGEOM.DIST(num_successes, num_draws, successes_in_pop, pop_size)", description: "SeeHYPGEOMDIST", category: "Statistical" },
  { "name": "HYPGEOMDIST", displayText: "HYPGEOMDIST(num_successes, num_draws, successes_in_pop, pop_size)", description: "Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws", category: "Statistical" },
  { "name": "INTERCEPT", displayText: "INTERCEPT(data_y, data_x)", description: "Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0)", category: "Statistical" },
  { "name": "KURT", displayText: "KURT(value1, value2)", description: "Calculates the kurtosis of a dataset, which describes the shape, and in particular the peakedness of that dataset", category: "Statistical" },
  { "name": "LARGE", displayText: "LARGE(data, n)", description: "Returns the nth largest element from a data set, where n is user-defined", category: "Statistical" },
  { "name": "LOGINV", displayText: "LOGINV(x, mean, standard_deviation)", description: "Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value", category: "Statistical" },
  { "name": "LOGNORM.DIST", displayText: "LOGNORM.DIST(x, mean, standard_deviation)", description: "SeeLOGNORMDIST", category: "Statistical" },
  { "name": "LOGNORM.INV", displayText: "LOGNORM.INV(x, mean, standard_deviation)", description: "SeeLOGINV", category: "Statistical" },
  { "name": "LOGNORMDIST", displayText: "LOGNORMDIST(x, mean, standard_deviation)", description: "Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value", category: "Statistical" },
  { "name": "MAX", displayText: "MAX(value1, [value2, ...])", description: "Returns the maximum value in a numeric dataset", category: "Statistical" },
  { "name": "MAXA", displayText: "MAXA(value1, value2)", description: "Returns the maximum numeric value in a dataset", category: "Statistical" },
  { "name": "MAXIFS", displayText: "MAXIFS(range, criteria_range1, criterion1, [criteria_range2, criterion2], …)", description: "Returns the maximum value in a range of cells, filtered by a set of criteria.", category: "Statistical" },
  { "name": "MEDIAN", displayText: "MEDIAN(value1, [value2, ...])", description: "Returns the median value in a numeric dataset", category: "Statistical" },
  { "name": "MIN", displayText: "MIN(value1, [value2, ...])", description: "Returns the minimum value in a numeric dataset", category: "Statistical" },
  { "name": "MINA", displayText: "MINA(value1, value2)", description: "Returns the minimum numeric value in a dataset", category: "Statistical" },
  { "name": "MINIFS", displayText: "MINIFS(range, criteria_range1, criterion1, [criteria_range2, criterion2], …)", description: "Returns the minimum value in a range of cells, filtered by a set of criteria.", category: "Statistical" },
  { "name": "MODE", displayText: "MODE(value1, [value2, ...])", description: "Returns the most commonly occurring value in a dataset", category: "Statistical" },
  { "name": "MODE.MULT", displayText: "MODE.MULT(value1, value2)", description: "Returns the most commonly occurring values in a dataset. Learn more.", category: "Statistical" },
  { "name": "MODE.SNGL", displayText: "MODE.SNGL(value1, [value2, ...])", description: "SeeMODE", category: "Statistical" },
  { "name": "NEGBINOM.DIST", displayText: "NEGBINOM.DIST(num_failures, num_successes, prob_success)", description: "SeeNEGBINOMDIST", category: "Statistical" },
  { "name": "NEGBINOMDIST", displayText: "NEGBINOMDIST(num_failures, num_successes, prob_success)", description: "Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials", category: "Statistical" },
  { "name": "NORM.DIST", displayText: "NORM.DIST(x, mean, standard_deviation, cumulative)", description: "SeeNORMDIST", category: "Statistical" },
  { "name": "NORM.INV", displayText: "NORM.INV(x, mean, standard_deviation)", description: "SeeNORMINV", category: "Statistical" },
  { "name": "NORM.S.DIST", displayText: "NORM.S.DIST(x)", description: "SeeNORMSDIST", category: "Statistical" },
  { "name": "NORM.S.INV", displayText: "NORM.S.INV(x)", description: "SeeNORMSINV", category: "Statistical" },
  { "name": "NORMDIST", displayText: "NORMDIST(x, mean, standard_deviation, cumulative)", description: "Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation", category: "Statistical" },
  { "name": "NORMINV", displayText: "NORMINV(x, mean, standard_deviation)", description: "Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation", category: "Statistical" },
  { "name": "NORMSDIST", displayText: "NORMSDIST(x)", description: "Returns the value of the standard normal cumulative distribution function for a specified value", category: "Statistical" },
  { "name": "NORMSINV", displayText: "NORMSINV(x)", description: "Returns the value of the inverse standard normal distribution function for a specified value", category: "Statistical" },
  { "name": "PEARSON", displayText: "PEARSON(data_y, data_x)", description: "Calculates r, the Pearson product-moment correlation coefficient of a dataset", category: "Statistical" },
  { "name": "PERCENTILE", displayText: "PERCENTILE(data, percentile)", description: "Returns the value at a given percentile of a dataset", category: "Statistical" },
  { "name": "PERCENTILE.EXC", displayText: "PERCENTILE.EXC(data, percentile)", description: "Returns the value at a given percentile of a dataset, exclusive of 0 and 1. Learn more.", category: "Statistical" },
  { "name": "PERCENTILE.INC", displayText: "PERCENTILE.INC(data, percentile)", description: "SeePERCENTILE", category: "Statistical" },
  { "name": "PERCENTRANK", displayText: "PERCENTRANK(data, value, [significant_digits])", description: "Returns the percentage rank (percentile) of a specified value in a dataset", category: "Statistical" },
  { "name": "PERCENTRANK.EXC", displayText: "PERCENTRANK.EXC(data, value, [significant_digits])", description: "Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset. Learn more", category: "Statistical" },
  { "name": "PERCENTRANK.INC", displayText: "PERCENTRANK.INC(data, value, [significant_digits])", description: "Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset", category: "Statistical" },
  { "name": "PERMUTATIONA", displayText: "PERMUTATIONA(number, number_chosen)", description: "Returns the number of permutations for selecting a group of objects (with replacement) from a total number of objects. Learn more.", category: "Statistical" },
  { "name": "PERMUT", displayText: "PERMUT(n, k)", description: "Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order", category: "Statistical" },
  { "name": "PHI", displayText: "PHI(x)", description: "The PHI function returns the value of the normal distribution with mean 0 and standard deviation 1.", category: "Statistical" },
  { "name": "POISSON", displayText: "POISSON(x, mean, cumulative)", description: "See POISSON.DIST", category: "Statistical" },
  { "name": "POISSON.DIST", displayText: "POISSON.DIST(x, mean, [cumulative])", description: "Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean.", category: "Statistical" },
  { "name": "PROB", displayText: "PROB(data, probabilities, low_limit, [high_limit])", description: "Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits", category: "Statistical" },
  { "name": "QUARTILE", displayText: "QUARTILE(data, quartile_number)", description: "Returns a value nearest to a specified quartile of a dataset", category: "Statistical" },
  { "name": "QUARTILE.EXC", displayText: "QUARTILE.EXC(data, quartile_number)", description: "Returns value nearest to a given quartile of a dataset, exclusive of 0 and 4. Learn more.", category: "Statistical" },
  { "name": "QUARTILE.INC", displayText: "QUARTILE.INC(data, quartile_number)", description: "SeeQUARTILE", category: "Statistical" },
  { "name": "RANK", displayText: "RANK(value, data, [is_ascending])", description: "Returns the rank of a specified value in a dataset", category: "Statistical" },
  { "name": "RANK.AVG", displayText: "RANK.AVG(value, data, [is_ascending])", description: "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned", category: "Statistical" },
  { "name": "RANK.EQ", displayText: "RANK.EQ(value, data, [is_ascending])", description: "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned", category: "Statistical" },
  { "name": "RSQ", displayText: "RSQ(data_y, data_x)", description: "Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset", category: "Statistical" },
  { "name": "SKEW", displayText: "SKEW(value1, value2)", description: "Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean", category: "Statistical" },
  { "name": "SKEW.P", displayText: "SKEW.P(value1, value2)", description: "Calculates the skewness of a dataset that represents the entire population. Learn more.", category: "Statistical" },
  { "name": "SLOPE", displayText: "SLOPE(data_y, data_x)", description: "Calculates the slope of the line resulting from linear regression of a dataset", category: "Statistical" },
  { "name": "SMALL", displayText: "SMALL(data, n)", description: "Returns the nth smallest element from a data set, where n is user-defined", category: "Statistical" },
  { "name": "STANDARDIZE", displayText: "STANDARDIZE(value, mean, standard_deviation)", description: "Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution", category: "Statistical" },
  { "name": "STDEV", displayText: "STDEV(value1, [value2, ...])", description: "Calculates the standard deviation based on a sample", category: "Statistical" },
  { "name": "STDEV.P", displayText: "STDEV.P(value1, [value2, ...])", description: "SeeSTDEVP", category: "Statistical" },
  { "name": "STDEV.S", displayText: "STDEV.S(value1, [value2, ...])", description: "SeeSTDEV", category: "Statistical" },
  { "name": "STDEVA", displayText: "STDEVA(value1, value2)", description: "Calculates the standard deviation based on a sample, setting text to the value `0`", category: "Statistical" },
  { "name": "STDEVP", displayText: "STDEVP(value1, value2)", description: "Calculates the standard deviation based on an entire population", category: "Statistical" },
  { "name": "STDEVPA", displayText: "STDEVPA(value1, value2)", description: "Calculates the standard deviation based on an entire population, setting text to the value `0`", category: "Statistical" },
  { "name": "STEYX", displayText: "STEYX(data_y, data_x)", description: "Calculates the standard error of the predicted y-value for each x in the regression of a dataset", category: "Statistical" },
  { "name": "T.DIST", displayText: "T.DIST(x, degrees_freedom, cumulative)", description: "Returns the right tailed Student distribution for a value x. Learn more.", category: "Statistical" },
  { "name": "T.DIST.2T", displayText: "T.DIST.2T(x, degrees_freedom)", description: "Returns the two tailed Student distribution for a value x. Learn more.", category: "Statistical" },
  { "name": "T.DIST.RT", displayText: "T.DIST.RT(x, degrees_freedom)", description: "Returns the right tailed Student distribution for a value x. Learn more.", category: "Statistical" },
  { "name": "T.INV", displayText: "T.INV(probability, degrees_freedom)", description: "Calculates the negative inverse of the one-tailed TDIST function", category: "Statistical" },
  { "name": "T.INV.2T", displayText: "T.INV.2T(probability, degrees_freedom)", description: "Calculates the inverse of the two-tailed TDIST function", category: "Statistical" },
  { "name": "T.TEST", displayText: "T.TEST(range1, range2, tails, type)", description: "Returns the probability associated with Student's t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean.", category: "Statistical" },
  { "name": "TDIST", displayText: "TDIST(x, degrees_freedom, tails)", description: "Calculates the probability for Student's t-distribution with a given input (x)", category: "Statistical" },
  { "name": "TINV", displayText: "TINV(probability, degrees_freedom)", description: "SeeT.INV.2T", category: "Statistical" },
  { "name": "TRIMMEAN", displayText: "TRIMMEAN(data, exclude_proportion)", description: "Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset", category: "Statistical" },
  { "name": "TTEST", displayText: "TTEST(range1, range2, tails, type)", description: "See T.TEST.", category: "Statistical" },
  { "name": "VAR", displayText: "VAR(value1, [value2, ...])", description: "Calculates the variance based on a sample", category: "Statistical" },
  { "name": "VAR.P", displayText: "VAR.P(value1, [value2, ...])", description: "SeeVARP", category: "Statistical" },
  { "name": "VAR.S", displayText: "VAR.S(value1, [value2, ...])", description: "SeeVAR", category: "Statistical" },
  { "name": "VARA", displayText: "VARA(value1, value2)", description: "Calculates an estimate of variance based on a sample, setting text to the value `0`", category: "Statistical" },
  { "name": "VARP", displayText: "VARP(value1, value2)", description: "Calculates the variance based on an entire population", category: "Statistical" },
  { "name": "VARPA", displayText: "VARPA(value1, value2,...)", description: "Calculates the variance based on an entire population, setting text to the value `0`", category: "Statistical" },
  { "name": "WEIBULL", displayText: "WEIBULL(x, shape, scale, cumulative)", description: "Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale", category: "Statistical" },
  { "name": "WEIBULL.DIST", displayText: "WEIBULL.DIST(x, shape, scale, cumulative)", description: "SeeWEIBULL", category: "Statistical" },
  { "name": "Z.TEST", displayText: "Z.TEST(data, value, [standard_deviation])", description: "Returns the one-tailed P-value of a Z-test with standard distribution.", category: "Statistical" },
  { "name": "ZTEST", displayText: "ZTEST(data, value, [standard_deviation])", description: "See Z.TEST.", category: "Statistical" },
  { "name": "ARABIC", displayText: "ARABIC(roman_numeral)", description: "Computes the value of a Roman numeral", category: "Text" },
  { "name": "ASC", displayText: "ASC(text)", description: "Converts full-width ASCII and katakana characters to their half-width counterparts. All standard-width characters will remain unchanged.", category: "Text" },
  { "name": "CHAR", displayText: "CHAR(table_number)", description: "Convert a number into a character according to the current Unicode table", category: "Text" },
  { "name": "CLEAN", displayText: "CLEAN(text)", description: "Returns the text with the non-printable ASCII characters removed", category: "Text" },
  { "name": "CODE", displayText: "CODE(string)", description: "Returns the numeric Unicode map value of the first character in the string provided. Learn more", category: "Text" },
  { "name": "CONCATENATE", displayText: "CONCATENATE(string1, [string2, ...])", description: "Appends strings to one another", category: "Text" },
  { "name": "DOLLAR", displayText: "DOLLAR(number, [number_of_places])", description: "Formats a number into the locale-specific currency format", category: "Text" },
  { "name": "EXACT", displayText: "EXACT(string1, string2)", description: "Tests whether two strings are identical", category: "Text" },
  { "name": "FIND", displayText: "FIND(search_for, text_to_search, [starting_at])", description: "Returns the position at which a string is first found within text", category: "Text" },
  { "name": "FINDB", displayText: "FINDB(search_for, text_to_search, [starting_at])", description: "Returns the position at which a string is first found within text counting each double-character as 2", category: "Text" },
  { "name": "FIXED", displayText: "FIXED(number, [number_of_places], [suppress_separator])", description: "Formats a number with a fixed number of decimal places", category: "Text" },
  { "name": "JOIN", displayText: "JOIN(delimiter, value_or_array1, [value_or_array2, ...])", description: "Concatenates the elements of one or more one-dimensional arrays using a specified delimiter", category: "Text" },
  { "name": "LEFT", displayText: "LEFT(string, [number_of_characters])", description: "Returns a substring from the beginning of a specified string", category: "Text" },
  { "name": "LEFTB", displayText: "LEFTB(string, num_of_bytes)", description: "Returns the left portion of a string up to a certain number of bytes. Learn more.", category: "Text" },
  { "name": "LEN", displayText: "LEN(text)", description: "Returns the length of a string", category: "Text" },
  { "name": "LENB", displayText: "LENB(string)", description: "Returns the length of a string in bytes. Learn more.", category: "Text" },
  { "name": "LOWER", displayText: "LOWER(text)", description: "Converts a specified string to lowercase", category: "Text" },
  { "name": "MID", displayText: "MID(string, starting_at, extract_length)", description: "Returns a segment of a string", category: "Text" },
  { "name": "MIDB", displayText: "MIDB(string)", description: "Returns a section of a string starting at a given character and up to a specified number of bytes. Learn more.", category: "Text" },
  { "name": "PROPER", displayText: "PROPER(text_to_capitalize)", description: "Capitalizes each word in a specified string", category: "Text" },
  { "name": "REGEXEXTRACT", displayText: "REGEXEXTRACT(text, regular_expression)", description: "Extracts matching substrings according to a regular expression", category: "Text" },
  { "name": "REGEXMATCH", displayText: "REGEXMATCH(text, regular_expression)", description: "Whether a piece of text matches a regular expression", category: "Text" },
  { "name": "REGEXREPLACE", displayText: "REGEXREPLACE(text, regular_expression, replacement)", description: "Replaces part of a text string with a different text string using regular expressions", category: "Text" },
  { "name": "REPLACE", displayText: "REPLACE(text, position, length, new_text)", description: "Replaces part of a text string with a different text string", category: "Text" },
  { "name": "REPLACEB", displayText: "REPLACEB(text, position, num_bytes, new_text)", description: "Replaces part of a text string, based on a number of bytes, with a different text string. Learn more.", category: "Text" },
  { "name": "REPT", displayText: "REPT(text_to_repeat, number_of_repetitions)", description: "Returns specified text repeated a number of times", category: "Text" },
  { "name": "RIGHT", displayText: "RIGHT(string, [number_of_characters])", description: "Returns a substring from the end of a specified string", category: "Text" },
  { "name": "RIGHTB", displayText: "RIGHTB(string, num_of_bytes)", description: "Returns the right portion of a string up to a certain number of bytes. Learn more.", category: "Text" },
  { "name": "ROMAN", displayText: "ROMAN(number, [rule_relaxation])", description: "Formats a number in Roman numerals", category: "Text" },
  { "name": "SEARCH", displayText: "SEARCH(search_for, text_to_search, [starting_at])", description: "Returns the position at which a string is first found within text", category: "Text" },
  { "name": "SEARCHB", displayText: "SEARCHB(search_for, text_to_search, [starting_at])", description: "Returns the position at which a string is first found within text counting each double-character as 2", category: "Text" },
  { "name": "SPLIT", displayText: "SPLIT(text, delimiter, [split_by_each], [remove_empty_text])", description: "Divides text around a specified character or string, and puts each fragment into a separate cell in the row", category: "Text" },
  { "name": "SUBSTITUTE", displayText: "SUBSTITUTE(text_to_search, search_for, replace_with, [occurrence_number])", description: "Replaces existing text with new text in a string", category: "Text" },
  { "name": "T", displayText: "T(value)", description: "Returns string arguments as text", category: "Text" },
  { "name": "TEXT", displayText: "TEXT(number, format)", description: "Converts a number into text according to a specified format", category: "Text" },
  { "name": "TEXTJOIN", displayText: "TEXTJOIN(delimiter, ignore_empty, text1, [text2], …)", description: "Combines the text from multiple strings and/or arrays, with a specifiable delimiter separating the different texts.", category: "Text" },
  { "name": "TRIM", displayText: "TRIM(text)", description: "Removes leading and trailing spaces in a specified string", category: "Text" },
  { "name": "UNICHAR", displayText: "UNICHAR(number)", description: "Returns the Unicode character for a number. Learn more.", category: "Text" },
  { "name": "UNICODE", displayText: "UNICODE(text)", description: "Returns the decimal Unicode value of the first character of the text.", category: "Text" },
  { "name": "UPPER", displayText: "UPPER(text)", description: "Converts a specified string to uppercase", category: "Text" },
  { "name": "VALUE", displayText: "VALUE(text)", description: "Converts a string in any of the date, time or number formats that Google Sheets understands into a number", category: "Text" },
  { "name": "ENCODEURL", displayText: "ENCODEURL(text)", description: "Encodes a string of text for the purpose of using in a URL query. Learn more.", category: "Web" },
  { "name": "HYPERLINK", displayText: "HYPERLINK(url, [link_label])", description: "Creates a hyperlink inside a cell", category: "Web" },
  { "name": "IMPORTDATA", displayText: "IMPORTDATA(url)", description: "Imports data at a given url in .csv (comma-separated value) or .tsv (tab-separated value) format", category: "Web" },
  { "name": "IMPORTFEED", displayText: "IMPORTFEED(url, [query], [headers], [num_items])", description: "Imports a RSS or ATOM feed", category: "Web" },
  { "name": "IMPORTHTML", displayText: "IMPORTHTML(url, query, index)", description: "Imports data from a table or list within an HTML page", category: "Web" },
  { "name": "IMPORTRANGE", displayText: "IMPORTRANGE(spreadsheet_url, range_string)", description: "Imports a range of cells from a specified spreadsheet", category: "Web" },
  { "name": "IMPORTXML", displayText: "IMPORTXML(url, xpath_query)", description: "Imports data from any of various structured data types including XML, HTML, CSV, TSV, and RSS and ATOM XML feeds", category: "Web" },
  { "name": "ISURL", displayText: "ISURL(value)", description: "Checks whether a value is a valid URL", category: "Web" },
];

function hint(cm, option) {
  return new Promise(function (accept) {
    setTimeout(function () {
      var cursor = cm.getCursor(), line = cm.getLine(cursor.line)
      var start = cursor.ch, end = cursor.ch
      while (start && /\w/.test(line.charAt(start - 1)))--start
      while (end < line.length && /\w/.test(line.charAt(end)))++end
      var word = line.slice(start, end).toLowerCase()

      var fuzzySearchOptions = {
        keys: ['name', 'description'],
        shouldSort: true,
        threshold: 0.6,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        minMatchCharLength: 1,
      };

      var fuse = new Fuse(comp, fuzzySearchOptions);
      var result = fuse.search(word);


      var hintData = _.map(result, function (e) {
        return {
          displayText: e.name,
          text: e.displayText
        }
      });

      if (result.length > 0) {
        return accept({
          list: hintData,
          from: CodeMirror.Pos(cursor.line, start),
          to: CodeMirror.Pos(cursor.line, end)
        })
      }

      return accept(null)
    }, 50)
  })
}

var opts = {
  value: "function myScript(){return 100;}\n",
  mode: "javascript",
  // theme: "darcula",
  indentUnit: 2,
  tabSize: 2,
  smartIndent: true,
  indentWithTabs: false,
  lineNumbers: true,
  lineNumberFormatter: function (l) {
    return l;
  },
  autofocus: true,
  extraKeys: { "Ctrl-Space": "autocomplete" },
  mode: { name: "javascript", globalVars: true },
  hintOptions: { hint: hint }
};

var textArea = document.querySelector("#code-area");
var codeArea = CodeMirror.fromTextArea(textArea, opts);

codeArea.on("change", function() {
  execute();
});

codeArea.setSize("100%", 100);

codeArea.change = function() {
  alert();
}

var execute = function () {

  var content = codeArea.getValue();
  var result;
  try {
    result = eval(content);
  } catch(ex) {
    (console.error || console.log).call(console, e.stack || e);
    result = ex.message;
  }

  document.querySelector(".result-area").innerText = result;
  console.log(result)
}
